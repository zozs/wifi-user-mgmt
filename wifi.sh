#!/bin/sh

DATABASE_FILE="freeradius.db"
DEFAULT_PASSWORD_LEN=10

sqlite_sql() {
	echo $(sqlite3 "$DATABASE_FILE" "$1")
}

sqlite_sqlsep() {
	echo $(sqlite3 -separator " " "$DATABASE_FILE" "$1")
}

random_password() {
	LC_CTYPE=C tr -dc _A-Z-a-z-0-9 < /dev/urandom |head -c"$1"
}

ask_username() {
	username=$(dialog --inputbox "$1" 0 0 3>&1 1>&2 2>&3 3>&-)
	exitcode=$?
	echo "$username"
	return $exitcode
}

ask_password() {
	# Now ask for password, or autogenerate if empty.
	autogenerated=0
	password=$(dialog --insecure --passwordbox "Enter desired password (or empty to autogenerate)" 0 0 3>&1 1>&2 2>&3 3>&-)
	if [ $? -ne 0 ]; then exit 2; fi
	if [ -z $password ]; then
		# Empty password, autogenerate a random one of 10 letters/digits.
		password=$(random_password "$DEFAULT_PASSWORD_LEN")
		autogenerated=1
	fi

	echo "$password"
	return $autogenerated
}

add_user() {
	# Ask for username.
	username=$(ask_username "Enter desired username")
	if [ $? -ne 0 ]; then exit 1; fi

	# Check if username is valid.
	if echo "$username" | grep -q -v '^[A-Za-z][A-Za-z0-9-]*$'; then
		# Invalid username.
		dialog --msgbox "Invalid username. Only A-Z and a-z is allowed." 0 0
		exit 1
	fi

	# Check if username is already taken.
	matches=$(sqlite_sql "SELECT COUNT(*) FROM radcheck WHERE username='$username';")
	if [ $matches -gt 0 ]; then
		dialog --msgbox "Username $username already taken." 0 0
		exit 1
	fi
	
	# Username not taken. Now continue and ask for user group.
	group=$(dialog --menu "Choose user group" 0 0 0 friends "Friends (VLAN 6)" family "Family (VLAN 1)" 3>&1 1>&2 2>&3 3>&-)
	if [ $? -ne 0 ]; then exit 0; fi

	# Now ask for password, or autogenerate if empty.
	password=$(ask_password)
	autogenerated=$?
	if [ $autogenerated -eq 2 ]; then exit 1; fi

	# Now calculate the NTLM-hash of the given password.
	hash=$(smbencrypt "$password" 2> /dev/null | cut -f 2)

	# Now insert the user into the database.
	sqlite_sql "INSERT INTO radcheck (username,attribute,op,value) VALUES ('$username','NT-Password',':=','$hash');"
	sqlite_sql "INSERT INTO radusergroup (username,groupname) VALUES ('$username','$group');"

	if [ $autogenerated -eq 1 ]; then
		dialog --msgbox "User added successfully. Password is: $password" 0 0
	else
		dialog --msgbox "User added successfully" 0 0
	fi
}

change_password() {
	password=$(ask_password)
	autogenerated=$?
	if [ $autogenerated -eq 2 ]; then exit 1; fi

	# Now calculate the NTLM-hash of the given password.
	hash=$(smbencrypt "$password" 2> /dev/null | cut -f 2)

	# Now update the password in the database.
	sqlite_sql "UPDATE radcheck SET value='$hash' WHERE username='$1' AND attribute='NT-Password';"

	if [ $autogenerated -eq 1 ]; then
		dialog --msgbox "Password updated successfully. Password is: $password" 0 0
	else
		dialog --msgbox "Password updated successfully" 0 0
	fi
}

disable_account() {
	# A user is disabled if the users belongs to the group "disabled"
	# Members of that group will get a Auth-Type := 'Reject' which will force the
	# user to be denied access. This requires the group to have that property set
	# in the table radgroupcheck.
	sqlite_sql "INSERT INTO radusergroup (username,groupname,priority) VALUES ('$1','disabled',0);"

	dialog --msgbox "The account for $1 has now been disabled." 0 0
}

enable_account() {
	sqlite_sql "DELETE FROM radusergroup WHERE username='$1' AND groupname='disabled';"
	dialog --msgbox "The account for $1 has now been enabled." 0 0
}

verify_password() {
	# Asks the user for a password and checks if it matches the one stored in the database.
	password=$(ask_password)
	if [ $? -eq 2 ]; then exit 1; fi

	# Now calculate the NTLM-hash of the given password.
	hash=$(smbencrypt "$password" 2> /dev/null | cut -f 2)

	# Check if this matches the password in database.
	count=$(sqlite_sql "SELECT COUNT(*) FROM radcheck WHERE username='$1' AND attribute='NT-Password' AND value='$hash';")
	if [ $count -eq 1 ]; then
		dialog --msgbox "Passwords match!" 0 0
	else
		dialog --msgbox "Passwords don't match!" 0 0
	fi
}

select_user() {
	# Get list of users.
	users=$(sqlite_sqlsep "SELECT username, (CASE (SELECT COUNT(*) AS groups FROM radusergroup WHERE radcheck.username=radusergroup.username AND groupname='disabled') WHEN 0 THEN '(enabled)' ELSE '(disabled)' END) AS status FROM radcheck;")

	# Present menu with all users.
	username=$(dialog --menu "Choose user to $1" 0 0 0 $users 3>&1 1>&2 2>&3 3>&-)
	exitcode=$?
	echo "$username"
	return $exitcode
}

modify_user() {
	username=$(select_user "modify")
	if [ $? -ne 0 ]; then exit 1; fi

	# Show new menu with options.
	modifytask=$(dialog --menu "What to do with user \"$username\"?" 0 0 0 verify "Verify password" change "Change password" disable "Disable account" enable "Enable account" 3>&1 1>&2 2>&3 3>&-)
	if [ $? -ne 0 ]; then exit 1; fi

	# Handle different cases.
	case "$modifytask" in
		change)
			change_password "$username"
			;;
		disable)
			disable_account "$username"
			;;
		enable)
			enable_account "$username"
			;;
		verify)
			verify_password "$username"
			;;
		*)
			echo "Something went wrong :("
	esac
}

delete_user() {
	username=$(select_user "delete")

	# Show confirmation.
	dialog --defaultno --yesno "Really delete user \"$username\"?" 0 0
	if [ $? -eq 0 ]; then
		# Delete.
		sqlite_sql "DELETE FROM radcheck WHERE username='$username';"
		sqlite_sql "DELETE FROM radusergroup WHERE username='$username';"
		
		dialog --msgbox "User \"$username\" deleted." 0 0
	fi
}

# Show task list.
task=$(dialog --menu "What do you want to do?" 0 0 0 add "Add user" modify "Modify user" delete "Delete user" 3>&1 1>&2 2>&3 3>&-)
if [ $? -ne 0 ]; then exit 0; fi

case "$task" in
	add)
		add_user
		;;
	modify)
		modify_user
		;;
	delete)
		delete_user
		;;
	*)
		echo "Something is wrong :("
		exit 1
esac
